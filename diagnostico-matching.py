"""
Script de diagn√≥stico para verificar matching de mat√©rias-primas
"""
import sqlite3

SQLITE_PATH = 'backend/nfe_system.db'

print("\n" + "="*80)
print("üîç DIAGN√ìSTICO DE MATCHING DE MAT√âRIAS-PRIMAS")
print("="*80 + "\n")

conn = sqlite3.connect(SQLITE_PATH)
cursor = conn.cursor()

# 1. Buscar mat√©rias-primas com FIO
print("üì¶ MAT√âRIAS-PRIMAS COM 'FIO' CADASTRADAS:\n")
cursor.execute("""
    SELECT id, nome 
    FROM materias_primas 
    WHERE nome LIKE '%FIO%' AND is_active = 1
    ORDER BY nome
    LIMIT 20
""")

materias_fio = cursor.fetchall()
if materias_fio:
    for mp_id, nome in materias_fio:
        print(f"  {mp_id:3d} | {nome}")
else:
    print("  ‚ö†Ô∏è  Nenhuma mat√©ria-prima com 'FIO' encontrada")

# 2. Buscar √∫ltimas notas importadas
print("\n" + "="*80)
print("üìÑ √öLTIMAS 5 NOTAS IMPORTADAS:\n")

cursor.execute("""
    SELECT n.id, n.numero, n.emissao_date, COUNT(ni.id) as total_itens
    FROM notas n
    LEFT JOIN nota_itens ni ON ni.nota_id = n.id
    GROUP BY n.id
    ORDER BY n.created_at DESC
    LIMIT 5
""")

notas = cursor.fetchall()
if notas:
    for nota_id, numero, data, total in notas:
        print(f"  üìã Nota {nota_id} | {numero} | {data} | {total} itens")
        
        # Buscar itens dessa nota
        cursor.execute("""
            SELECT nome_no_documento, materia_prima_id, valor_unitario
            FROM nota_itens
            WHERE nota_id = ?
        """, (nota_id,))
        
        itens = cursor.fetchall()
        for nome_doc, mp_id, valor in itens:
            if mp_id:
                # Buscar nome da mat√©ria-prima vinculada
                cursor.execute("SELECT nome FROM materias_primas WHERE id = ?", (mp_id,))
                mp_nome = cursor.fetchone()
                mp_nome = mp_nome[0] if mp_nome else "???"
                status = f"‚úÖ Vinculado: {mp_nome}"
            else:
                status = "‚ùå N√ÉO VINCULADO"
            
            print(f"      ‚Ä¢ {nome_doc[:45]:45s} | {status}")
            print(f"        Valor: R$ {valor:.4f}")
        print()
else:
    print("  ‚ö†Ô∏è  Nenhuma nota encontrada")

# 3. Verificar pre√ßos registrados recentemente
print("="*80)
print("üí∞ √öLTIMOS 10 PRE√áOS REGISTRADOS (ATIVOS):\n")

cursor.execute("""
    SELECT 
        mp.nome,
        mpp.valor_unitario,
        mpp.vigente_desde,
        mpp.nota_id
    FROM materia_prima_precos mpp
    JOIN materias_primas mp ON mp.id = mpp.materia_prima_id
    WHERE mpp.vigente_ate IS NULL
    ORDER BY mpp.vigente_desde DESC
    LIMIT 10
""")

precos = cursor.fetchall()
if precos:
    for nome, valor, data, nota_id in precos:
        print(f"  {nome[:45]:45s} | R$ {valor:8.4f} | {data[:10]} | Nota: {nota_id or 'Manual'}")
else:
    print("  ‚ö†Ô∏è  Nenhum pre√ßo ativo encontrado")

# 4. Estat√≠sticas gerais
print("\n" + "="*80)
print("üìä ESTAT√çSTICAS GERAIS:\n")

cursor.execute("SELECT COUNT(*) FROM materias_primas WHERE is_active = 1")
total_mp = cursor.fetchone()[0]
print(f"  ‚Ä¢ Total de mat√©rias-primas ativas: {total_mp}")

cursor.execute("SELECT COUNT(*) FROM notas")
total_notas = cursor.fetchone()[0]
print(f"  ‚Ä¢ Total de notas fiscais: {total_notas}")

cursor.execute("SELECT COUNT(*) FROM nota_itens WHERE materia_prima_id IS NOT NULL")
itens_vinculados = cursor.fetchone()[0]
cursor.execute("SELECT COUNT(*) FROM nota_itens")
total_itens = cursor.fetchone()[0]
percentual = (itens_vinculados / total_itens * 100) if total_itens > 0 else 0
print(f"  ‚Ä¢ Itens vinculados a mat√©rias-primas: {itens_vinculados}/{total_itens} ({percentual:.1f}%)")

cursor.execute("SELECT COUNT(*) FROM materia_prima_precos WHERE vigente_ate IS NULL")
precos_ativos = cursor.fetchone()[0]
print(f"  ‚Ä¢ Pre√ßos ativos no hist√≥rico: {precos_ativos}")

cursor.execute("SELECT COUNT(DISTINCT materia_prima_id) FROM materia_prima_precos WHERE vigente_ate IS NULL")
mp_com_preco = cursor.fetchone()[0]
print(f"  ‚Ä¢ Mat√©rias-primas com pre√ßo atual: {mp_com_preco}/{total_mp} ({mp_com_preco/total_mp*100 if total_mp > 0 else 0:.1f}%)")

# 5. Problemas identificados
print("\n" + "="*80)
print("‚ö†Ô∏è  PROBLEMAS IDENTIFICADOS:\n")

problemas = []

# Itens n√£o vinculados
cursor.execute("""
    SELECT COUNT(*) 
    FROM nota_itens 
    WHERE materia_prima_id IS NULL
""")
itens_nao_vinculados = cursor.fetchone()[0]
if itens_nao_vinculados > 0:
    problemas.append(f"  ‚ùå {itens_nao_vinculados} itens de notas N√ÉO est√£o vinculados a mat√©rias-primas")
    print(problemas[-1])
    
    # Mostrar exemplos
    cursor.execute("""
        SELECT DISTINCT nome_no_documento
        FROM nota_itens
        WHERE materia_prima_id IS NULL
        LIMIT 5
    """)
    print("     Exemplos:")
    for (nome,) in cursor.fetchall():
        print(f"       ‚Ä¢ {nome}")

# Mat√©rias-primas sem pre√ßo
mp_sem_preco = total_mp - mp_com_preco
if mp_sem_preco > 0:
    problemas.append(f"  ‚ö†Ô∏è  {mp_sem_preco} mat√©rias-primas N√ÉO t√™m pre√ßo registrado")
    print(problemas[-1])

if not problemas:
    print("  ‚úÖ Nenhum problema identificado!")

# 6. Recomenda√ß√µes
print("\n" + "="*80)
print("üí° RECOMENDA√á√ïES:\n")

if itens_nao_vinculados > 0:
    print("  1. Verificar logs do backend ao importar notas:")
    print("     docker-compose logs backend | grep 'DEBUG'")
    print()
    print("  2. Verificar se nomes das mat√©rias-primas no banco correspondem aos da nota")
    print()

if mp_sem_preco > 0:
    print("  3. Cadastrar pre√ßo inicial para mat√©rias-primas sem hist√≥rico:")
    print("     - Ir em 'Mat√©rias-Primas' ‚Üí Editar ‚Üí Informar pre√ßo inicial")
    print()

print("  4. Ap√≥s importar uma nota, verificar:")
print("     - Hist√≥rico de pre√ßos em 'Mat√©rias-Primas'")
print("     - Clicar 'Recalcular Pre√ßos' em 'Produtos'")

conn.close()

print("\n" + "="*80)
print("‚úÖ DIAGN√ìSTICO CONCLU√çDO!")
print("="*80 + "\n")

