"""
Script para corrigir pre√ßos duplicados no hist√≥rico
Fecha pre√ßos antigos que ainda est√£o com vigente_ate = NULL
"""
import sqlite3
from datetime import datetime

SQLITE_PATH = 'backend/nfe_system.db'

print("\n" + "="*60)
print("üîß CORRE√á√ÉO DE PRE√áOS DUPLICADOS")
print("="*60 + "\n")

conn = sqlite3.connect(SQLITE_PATH)
cursor = conn.cursor()

# Buscar mat√©rias-primas com m√∫ltiplos pre√ßos ativos
cursor.execute("""
    SELECT materia_prima_id, COUNT(*) as total
    FROM materia_prima_precos
    WHERE vigente_ate IS NULL
    GROUP BY materia_prima_id
    HAVING COUNT(*) > 1
    ORDER BY total DESC
""")

materias_com_duplicados = cursor.fetchall()

if not materias_com_duplicados:
    print("‚úÖ Nenhum pre√ßo duplicado encontrado!")
    print("   Todos os pre√ßos est√£o corretos.\n")
    conn.close()
    exit(0)

print(f"‚ö†Ô∏è  Encontradas {len(materias_com_duplicados)} mat√©rias-primas com m√∫ltiplos pre√ßos ativos:\n")

total_corrigidos = 0

for mp_id, total_ativos in materias_com_duplicados:
    # Buscar nome da mat√©ria-prima
    cursor.execute("SELECT nome FROM materias_primas WHERE id = ?", (mp_id,))
    nome = cursor.fetchone()[0]
    
    print(f"üì¶ {nome} (ID: {mp_id}) - {total_ativos} pre√ßos ativos")
    
    # Buscar todos os pre√ßos ativos, ordenados por data (mais recente primeiro)
    cursor.execute("""
        SELECT id, valor_unitario, vigente_desde
        FROM materia_prima_precos
        WHERE materia_prima_id = ? AND vigente_ate IS NULL
        ORDER BY vigente_desde DESC
    """, (mp_id,))
    
    precos = cursor.fetchall()
    
    # O primeiro √© o mais recente (manter ativo)
    preco_atual = precos[0]
    print(f"   ‚úÖ Mantendo: R$ {preco_atual[1]:.4f} (desde {preco_atual[2][:10]})")
    
    # Os demais devem ser fechados
    for i, preco_antigo in enumerate(precos[1:], 1):
        preco_id, valor, vigente_desde = preco_antigo
        
        # Fechar com a data do pr√≥ximo pre√ßo (ou data atual se for o √∫ltimo)
        if i < len(precos) - 1:
            vigente_ate = precos[i][2]  # Data do pr√≥ximo pre√ßo
        else:
            vigente_ate = preco_atual[2]  # Data do pre√ßo mais recente
        
        cursor.execute("""
            UPDATE materia_prima_precos
            SET vigente_ate = ?
            WHERE id = ?
        """, (vigente_ate, preco_id))
        
        print(f"   üîí Fechando: R$ {valor:.4f} (at√© {vigente_ate[:10]})")
        total_corrigidos += 1
    
    print()

# Confirmar altera√ß√µes
conn.commit()

print("="*60)
print(f"‚úÖ CORRE√á√ÉO CONCLU√çDA!")
print(f"   {total_corrigidos} pre√ßos antigos foram fechados")
print("="*60 + "\n")

# Verifica√ß√£o final
cursor.execute("""
    SELECT materia_prima_id, COUNT(*) as total
    FROM materia_prima_precos
    WHERE vigente_ate IS NULL
    GROUP BY materia_prima_id
    HAVING COUNT(*) > 1
""")

ainda_duplicados = cursor.fetchall()

if ainda_duplicados:
    print("‚ö†Ô∏è  ATEN√á√ÉO: Ainda existem pre√ßos duplicados!")
    for mp_id, total in ainda_duplicados:
        cursor.execute("SELECT nome FROM materias_primas WHERE id = ?", (mp_id,))
        nome = cursor.fetchone()[0]
        print(f"   ‚Ä¢ {nome}: {total} pre√ßos ativos")
else:
    print("‚úÖ Verifica√ß√£o final: Todos os pre√ßos est√£o corretos!")

conn.close()
print()

